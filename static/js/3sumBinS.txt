class Solution {
public:
    int binS(vector<int>& a, int b){
        int s = a.size();
        int l = 0;
        int r = size(a) - 1;
        int pos = a.size()/2;
        while(1){
            if(a[pos]==b)return pos;
            if(l==r) return -1;
            if(a[pos]<b){
                l = pos + 1;
                pos = (l+r)/2;
            }
            else if(a[pos]>b){
                r = pos - 1;
                pos = (l+r)/2;
            }
        }
    }
    void bubbleSort(vector<int>& a){
        bool isNotSorted = 1;
        while(isNotSorted){
            isNotSorted = 0;
            for(auto it = a.begin(); it != a.end() - 1; it++){
                if(*it > *(it + 1)){
                    int temp = *it;
                    *it = *(it + 1);
                    *(it + 1) = temp;
                    isNotSorted = 1;
                }
            }
        }
    }
    
    void reduce(vector<int>& a){
        if(*a.begin() == 0 and *(a.end() - 1) == 0){
            if(a.end() - a.begin() > 3){
                a = vector<int>({0,0,0});
                return;
            }
        }
        auto h = a.end() - 3;
        bool isReduced = 0;
        while(!isReduced){
            isReduced = 1;
            for(auto it = a.begin(); it - a.end() < -3; it++){
                if(*it == *(it + 2)){
                    if(*it != 0){
                        it = a.erase(it + 2);
                        isReduced = 0;
                    }
                    else{
                        if(*(it + 3) == 0){
                            it = a.erase(it + 3);
                            isReduced = 0;
                        }
                    }
                }
            }
        }
    }
    
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ret;
        if(!(nums.size()==0))bubbleSort(nums);
        if(nums.end() - nums.begin() <= 2) return ret;
        reduce(nums);
        int done = 0;
        for(auto it = nums.begin(); it - nums.end() < -2; it++){
            while(nums.begin() - it < 0 and nums.end() - it > 1 and *(it-1) == *it) it++;
            int t1 = *it;
            if(t1 > 0){ 
                return ret;
            }
            for(auto it1 = it + 1; it1 - nums.end() < -1; it1++){
                while(nums.end() - it1 > 1 and *(it1-1) == *it1 and *it1 != t1) it1++;
                int t2 = *it1;
                if(t1 + t2 > 0){
                        break;
                }
                int f = t1 + t2;
                int index = binS(nums, -f);
                if(index == -1) continue;
                while(index < nums.size() - 1 and nums[index] == nums[index+1])index++;
                if(index > it1 - nums.begin()){
                    ret.push_back(vector({*it, *it1, -f}));
                    
                }
            }
        }
        return ret;
    }
};